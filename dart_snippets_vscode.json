{"Freezed BLoC 8.0": {
  "prefix": "fbloc_8.0",
  "body": [
   "import 'package:flutter_bloc/flutter_bloc.dart';",
   "import 'package:bloc_concurrency/bloc_concurrency.dart';",
   "import 'package:freezed_annotation/freezed_annotation.dart';",
   "",
   "part '${TM_FILENAME_BASE}.freezed.dart';",
   "",
   "@Freezed(map: FreezedMapOptions.none,when: FreezedWhenOptions.none,copyWith: true)",
   "sealed class ${1:${TM_FILENAME_BASE/(.*)(?=_bloc)(_bloc)/${1:/pascalcase}/}}Event with _$${1}Event {",
   " const ${1}Event._();",
   "",
   " const factory ${1}Event.create() = _Create${1}Event;",
   "",
   " const factory ${1}Event.read() = _Read${1}Event;",
   "",
   " const factory ${1}Event.update() = _Update${1}Event;",
   "",
   " const factory ${1}Event.delete() = _Delete${1}Event;",
   "}",
   "",
   "@Freezed(map: FreezedMapOptions.none,when: FreezedWhenOptions.none,copyWith: true)",
   "sealed class ${1}State with _$${1}$State {",
   " const ${1}State._();",
   "",
   " const factory ${1}State.initial() = _Initial${1}State;",
   "",
   " const factory ${1}State.processing() = _Processing${1}State;",
   "",
   " const factory ${1}State.loaded(List<dynamic> result) = _Loaded${1}State;",
   "",
   " const factory ${1}State.failure() = _Failure${1}State;",
   "}",
   "",
   "class ${1}Bloc extends Bloc<${1}Event, ${1}State> {",
   "\t${1}Bloc() : super(const _Initial${1}State()){",
   "\t\ton<${1}Event>(",
   "\t\t(event, emitter) async {",
   "\t\t\t\tswitch(event)  {",
   "\t\t\t\t\tcase _Create${1}Event():",
   "\t\t\t\tawait _create(event,emitter);",
   "\t\t\t\t\tcase _Read${1}Event():",
   "\t\t\t\tawait _read(event,emitter);",
   "\t\t\t\tcase _Update${1}Event():",
   "\t\t\t\t\tawait _update(event,emitter);",
   "\t\t\t\tcase _Delete${1}Event():",
   "\t\t\t\t\tawait _delete(event,emitter);",
   "\t\t\t}",
   "\t\t},",
   " transformer: sequential(),",
   "); ",
   "}",
   "",
   " Future<void> _create(_Create${1}Event event, Emitter<${1}State> emit) async {",
   "  // ...",
   " }",
   "",
   " Future<void> _read(_Read${1}Event event, Emitter<${1}State> emit) async {",
   "  // ...",
   " }",
   "",
   " Future<void> _update(_Update${1}Event event, Emitter<${1}State> emit) async {",
   "  // ...",
   " }",
   "",
   " Future<void> _delete(_Delete${1}Event event, Emitter<${1}State> emit) async{",
   "  // ...",
   " }",
   "}",
  ],
  "description": "Template BLoC with Freezed"
 },
}
